# generated by fastapi-codegen:
#   filename:  openapi-2.json
#   timestamp: 2021-05-26T13:18:58+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, conint, constr, validator, ValidationError
from enum import Enum
from string import ascii_letters
from fastapi import status, HTTPException

""" =========== App models ============"""

class Schedule(BaseModel):
    id: Optional[int] = None
    assignee_id: int = Field(..., example=1312332)
    beginDate: datetime = Field(
        ...,
        example="2020-11-17T12:08:56.235-0100",
        description="Date format according to ISO_8601 for example: yyyy-MM-dd'T'HH:mm:ss.SSSZ",
    )
    endDate: datetime = Field(
        ...,
        example="2020-11-17T12:08:56.235-0100",
        description="Date format according to ISO_8601 for example: yyyy-MM-dd'T'HH:mm:ss.SSSZ",
    )

    class Config:
        orm_mode = True

class Breed(Enum):
    wikunia = 'wikunia'
    alpaka  = 'alpaka'
    guanako = 'guanako'
    lama    = 'lama'

class Llama(BaseModel):
    id: Optional[int] = None
    name: str = Field(..., example='Sniezka')
    age: conint(ge=1, le=100) = Field(..., example=10)
    breed: Breed = Field(..., example="wikunia")
    color: str = Field(..., example='brown')
    coat: str = Field(..., example='podrozny')

    class Config:
        orm_mode = True

    @validator('name')
    def name_cannot_contain_numbers(cls, v):
        # If any of characters is not a letter, throw
        if any(True for e in v if e not in ascii_letters):
            raise ValueError('name can only contain letters')
        return v
    #

    @validator('color')
    def color_cannot_contain_numbers(cls, v):
        # If any of characters is not a letter, throw
        if any(True for e in v if e not in ascii_letters):
            raise ValueError('color can only contain letters')
        return v
    #
#

""" =========== Requests ============"""
class CreateRequest(BaseModel):
    llama: Llama

class UpdateRequest(BaseModel):
    llama: Llama

class LlamaListResponse(BaseModel):
    llamaList: List[Llama]

class AddScheduleRequest(BaseModel):
    schedule: Schedule

class ScheduleListResponse(BaseModel):
    llamaList: Optional[List[Schedule]] = None

""" =========== OAuth token ============"""
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None

""" =========== Errors / Exceptions ============"""
class CustomHttpException(Exception):
    def __init__(self, message: str, sendDate: str, requestId : str, status_code : int, code : str):
        self.code = code
        self.message = message
        self.requestId = requestId
        self.sendDate = sendDate
        self.status_code = status_code
    def __str__(self):
        return str(self.__dict__)

CredentialsException = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
ScopeException = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Scope of token is not valid",
        headers={"WWW-Authenticate": "Bearer"},
    )
ExpiryException = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Token has already expired",
        headers={"WWW-Authenticate": "Bearer"},
    )
