# generated by fastapi-codegen:
#   filename:  openapi-2.json
#   timestamp: 2021-05-26T13:18:58+00:00

from __future__ import annotations
from uuid import UUID
from fastapi import FastAPI, Query, Depends, HTTPException

from sqlalchemy.orm import Session
import cruddb, model
from database import SessionLocal, engine
from schemas import *

model.Base.metadata.create_all(bind=engine)

app = FastAPI(
    title='LlamaVille - system zarządzania lamami',
    description='System uporządzania lam na posterunku',
    termsOfService='https://brzydakville.space',
    contact={'email': 'llamanager@brzydakville.space'},
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    version='1.0.0',
)

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Finished all logic. Now have to implement HTTP responses, exceptions etc. 

"""
    Pobierz listę lam +
"""
@app.get('/lama', response_model=List[Llama])
async def get_all_llamas( 
                            db: Session = Depends(get_db)
                        ) -> LlamaListResponse:
    return cruddb.get_llamas(db)
#

"""
    Dodaj lame +
"""
@app.post('/lama', response_model=None)
async def register_lama(llamaRequest : CreateRequest,
                        #X_HMAC_SIGNATURE: str = Query(..., alias='X-HMAC-SIGNATURE'),
                        db: Session = Depends(get_db)) -> None:
    return cruddb.create_llama(db=db, llama=llamaRequest.llama)
#

"""
    Zaktualizuj lame + 
"""
@app.put('/lama/{id}', response_model=None)
async def update_llama(id: int, 
                       llamaRequest : UpdateRequest,
                       #X_HMAC_SIGNATURE: str = Query(..., alias='X-HMAC-SIGNATURE'),
                       db: Session = Depends(get_db)) -> None:
    # TODO: Add response 200 here
    return cruddb.update_llama(db, llamaRequest.llama, id)
#

"""
    Usun lame + 
"""
@app.delete('/lama/{id}', response_model=None)
async def delete_llama(id: int, db: Session = Depends(get_db)) -> None:
    return cruddb.delete_llama(db, id)
#

"""
    Pobierz listę wszystkich pozycji w harmonogramie z przypisanymi lamami
"""
@app.get('/posterunek', response_model=List[Schedule])
async def get_schedule(
                        db: Session = Depends(get_db)
                      ) -> ScheduleListResponse:
    return cruddb.get_schedules(db)

# todo: this endpoint is not in yaml
"""
    Pobierz listę lam która znajduje się na posterunku w danej godzinie
"""
@app.get('/posterunek/{schedtime}', response_model=List[Llama])
async def get_llamas_at_schedule(
                                    schedtime: datetime,
                                    db: Session = Depends(get_db)
                                ) -> LlamaListResponse:
    return cruddb.get_llamas_at_schedule(db, schedtime=schedtime)
#

"""
    Przypisz lamę do posterunku w określonym harmonogramie + 
"""
@app.post('/posterunek', response_model=None)
async def register_schedule(
                                scheduleRequest: AddScheduleRequest,
                                db: Session = Depends(get_db),
                                #X_HMAC_SIGNATURE: str = Query(..., alias='X-HMAC-SIGNATURE')
                           ) -> None:                     
    return cruddb.create_schedule(db, schedule=scheduleRequest.schedule)


# TODO
@app.get('/token', response_model=None)
async def get_token():
    pass
