# generated by fastapi-codegen:
#   filename:  openapi-2.json
#   timestamp: 2021-05-26T13:18:58+00:00

from __future__ import annotations
from uuid import UUID
from fastapi import FastAPI, Query, Depends, HTTPException

from sqlalchemy.orm import Session
import cruddb, model
from database import SessionLocal, engine
from schemas import *

model.Base.metadata.create_all(bind=engine)

app = FastAPI(
    title='LlamaVille - system zarządzania lamami',
    description='System uporządzania lam na posterunku',
    termsOfService='https://brzydakville.space',
    contact={'email': 'llamanager@brzydakville.space'},
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    version='1.0.0',
)

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Llama endpoint - ready, haven't checked delete and update yet
# posterunek endpoint - to be done 

"""
    Pobierz listę lam
"""
@app.get('/lama', response_model=List[Llama])
async def get_all_llamas(skip: int = 0, limit: 
                         int = 100, db: 
                         Session = Depends(get_db)) -> LlamaListResponse:
    return cruddb.get_llamas(db, skip=skip, limit=limit)
#

"""
    Dodaj lame
"""
@app.post('/lama', response_model=None)
async def register_lama(llamaRequest : CreateRequest,
                        #X_HMAC_SIGNATURE: str = Query(..., alias='X-HMAC-SIGNATURE'),
                        db: Session = Depends(get_db)) -> None:

    return cruddb.create_llama(db=db, llama=llamaRequest.llama)
#   

"""
    Zaktualizuj lame
"""
@app.put('/lama/{id}', response_model=None)
async def update_llama(id: int, 
                       llamaRequest : UpdateRequest,
                       X_HMAC_SIGNATURE: str = Query(..., alias='X-HMAC-SIGNATURE'),
                       db: Session = Depends(get_db)) -> None:
    return cruddb.update_llama(db, llamaRequest)
#

"""
    Usun lame
"""
@app.delete('/lama/{id}', response_model=None)
async def delete_llama(id: UUID, db: Session = Depends(get_db)) -> None:
    return cruddb.delete_llama(db, id)
#


@app.get('/posterunek', response_model=ScheduleListResponse)
def get_schedule() -> ScheduleListResponse:
    """
    Pobierz listę wszystkich pozycji w harmonogramie z przypisanymi lamami
    """
    pass


@app.post('/posterunek', response_model=None)
def register_schedule(
    X_HMAC_SIGNATURE: str = Query(..., alias='X-HMAC-SIGNATURE')
) -> None:
    """
    Przypisz lamę do posterunku w określonym harmonogramie
    """
    pass
